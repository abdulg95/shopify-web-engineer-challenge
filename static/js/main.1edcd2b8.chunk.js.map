{"version":3,"sources":["components/Header.js","components/Spinner.js","App.js","serviceWorker.js","index.js","components/Spinner.module.css"],"names":["header","react_default","a","createElement","className","spinner","classes","Loader","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parse","searchTerm","parsedData","state","data","filter","object","keywords","indexOf","console","log","handleChange","event","setState","value","target","handleFavourite","id","faveLocation","findIndex","item","tempData","tempFaves","toConsumableArray","favourites","favourite","tempIndex","splice","push","handleSubmit","preventDefault","items","formatItems","length","map","index","btnClass","parsedHtml","Parser","body","rawHtml","dangerouslySetInnerHTML","__html","toString","key","onClick","Glyphicon","glyph","title","formatFavourites","isLoading","error","_this2","Axios","get","then","response","shortid","generate","catch","alert","Spinner","Header","onSubmit","type","style","paddingTop","paddingBottom","fontSize","margin","onChange","backgroundColor","marginRight","marginTop","borderRadius","border","background","color","marginLeft","fontWeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","load6","round"],"mappings":"8LASeA,EAPA,kBACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACdH,EAAAC,EAAAC,cAAA,qDCCIE,EAHC,kBACZJ,EAAAC,EAAAC,cAAA,OAAKC,UAAaE,IAAQC,QAA1B,2ECiPWC,qBAvOb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgCRQ,MAAQ,SAACC,GACP,IAAIC,EAUJ,OATAA,EAAaT,EAAKU,MAAMC,KAEXC,OAAO,SAAAC,GACJ,IAA6C,IAAzCA,EAAOC,SAASC,QAAQP,GACxB,OAAOK,IAG3BG,QAAQC,IAAIT,GACZQ,QAAQC,IAAIR,GACLA,GA5CUT,EAgDnBkB,aAAe,SAACC,GACdnB,EAAKoB,SAAS,CAACC,MAAOF,EAAMG,OAAOD,SAjDlBrB,EAqDnBuB,gBAAkB,SAACC,GACjB,IAAIC,EAAezB,EAAKU,MAAMC,KAAKe,UAAU,SAAAC,GAAI,OAAGA,EAAKH,KAAOA,IAC5DI,EAAW,GACXC,EAAY,GAIhB,GAHAD,EAAQ3B,OAAA6B,EAAA,EAAA7B,CAAOD,EAAKU,MAAMC,MAC1BkB,EAAS5B,OAAA6B,EAAA,EAAA7B,CAAOD,EAAKU,MAAMqB,YAEvB/B,EAAKU,MAAMC,KAAKc,GAAcO,UAAU,CACxCJ,EAASH,GAAcO,WAAY,EACnC,IAAIC,EAAYjC,EAAKU,MAAMqB,WAAWL,UAAU,SAAAC,GAAI,OAAGA,EAAKH,KAAOA,KAC7C,IAAlBC,GACFI,EAAUK,OAAOD,EAAU,QAK9BL,EAASH,GAAcO,WAAY,EACnCH,EAAUM,KAAKP,EAASH,IAE3BzB,EAAKoB,SAAS,CAACT,KAAKiB,EAASG,WAAWF,KAxEvB7B,EA4EnBoC,aAAe,SAACjB,GACdA,EAAMkB,iBACmB,KAArBrC,EAAKU,MAAMW,MACbrB,EAAKoB,SAAS,CAACkB,MAAM,KAEnBtC,EAAKoB,SAAS,CAACkB,MAAOtC,EAAKO,MAAMP,EAAKU,MAAMW,UAjF/BrB,EAsFnBuC,YAAc,WAsCZ,OApCgC,IAA5BvC,EAAKU,MAAM4B,MAAME,OAEbjD,EAAAC,EAAAC,cAAA,YAGIO,EAAKU,MAAM4B,MACVG,IAAI,SAACd,EAAMe,GAEX,IAAIC,EAAWhB,EAAKK,UAAY,kBAAoB,aAC/CY,EAAaC,IAAOlB,EAAKmB,MAC1BC,EAAUxD,EAAAC,EAAAC,cAAA,OAAKuD,wBAAyB,CAACC,OAAOL,EAAWM,cAEhE,OACI3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOyD,IAAKT,GACvBnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,UACGC,UAAWiD,EAEXS,QAAW,kBAAKpD,EAAKuB,gBAAgBI,EAAKH,MAC1CjC,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAWC,MAAM,UAEjB/D,EAAAC,EAAAC,cAAA,UAAKkC,EAAK4B,SAGlBhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVqD,SApHhB/C,EAgInBwD,iBAAmB,WAoCjB,OAlCqC,IAAjCxD,EAAKU,MAAMqB,WAAWS,OAElBjD,EAAAC,EAAAC,cAAA,YAGIO,EAAKU,MAAMqB,WACVU,IAAI,SAACd,EAAMe,GACX,IAAIC,EAAWhB,EAAKK,UAAY,kBAAoB,aAC/CY,EAAaC,IAAOlB,EAAKmB,MAC1BC,EAAUxD,EAAAC,EAAAC,cAAA,OAAKuD,wBAAyB,CAACC,OAAOL,EAAWM,cAE/D,OACG3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOyD,IAAKT,GACvBnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,UACGC,UAAWiD,EACXS,QAAW,kBAAKpD,EAAKuB,gBAAgBI,EAAKH,MAC1CjC,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAWC,MAAM,UAEjB/D,EAAAC,EAAAC,cAAA,UAAKkC,EAAK4B,SAGlBhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVqD,SAzJjC/C,EAAKU,MAAQ,CACXC,KAAM,GACNoB,WAAY,GACZ0B,WAAW,EACXC,MAAO,KACPrC,MAAO,GACPiB,MAAO,IATQtC,mFAaA,IAAA2D,EAAAxD,KAEjByD,IAAMC,IAlBE,2EAkBOC,KAAK,SAAAC,GAEnBA,EAASpD,KAAK8B,IAAI,SAACd,GAEhBA,EAAKK,WAAY,EACjBL,EAAKH,GAAKwC,IAAQC,aAGpBN,EAAKvC,SAAS,CAACT,KAAMoD,EAASpD,KAAK8C,WAAW,IAC9CzC,QAAQC,IAAI0C,EAAKjD,MAAMC,QACtBuD,MAAM,SAAAR,GACPC,EAAKvC,SAAS,CAACsC,MAAOA,EAAMD,WAAW,IACvCU,MAAM,mDAAoDT,sCAgJ5D,OAAIvD,KAAKO,MAAM+C,UACLlE,EAAAC,EAAAC,cAAC2E,EAAD,MAGR7E,EAAAC,EAAAC,cAAA,OAAKC,UAAY,qBAEbH,EAAAC,EAAAC,cAAC4E,EAAD,MACF9E,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBAGfH,EAAAC,EAAAC,cAAA,QAAM6E,SAAUnE,KAAKiC,cACf7C,EAAAC,EAAAC,cAAA,SAAO8E,KAAK,OACZlD,MAAOlB,KAAKO,MAAMW,MAClBmD,MAAS,CAAEC,WAAY,MAAMC,cAAe,MAAMC,SAAU,QAASC,OAAQ,QAC7EC,SAAU1E,KAAKe,eACjB3B,EAAAC,EAAAC,cAAA,UAAQ8E,KAAK,SAASC,MAAS,CAACM,gBAAiB,UAAWC,YAAa,OAAQC,UAAW,OAAQC,aAAa,MAAOC,OAAO,SAC/H3F,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAWC,MAAM,0BAKnB/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVS,KAAKoC,gBAKXpC,KAAKO,MAAMqB,WAAWS,OAAS,EAAIjD,EAAAC,EAAAC,cAAA,OAC5BC,UAAU,kBACV8E,MAAO,CACPW,WAAY,UACZT,cAAc,SAEdnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MACI+E,MAAO,CACPY,MAAO,UACPC,WAAY,OACZZ,WAAW,OACXa,WAAW,SALf,gBAUR/F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEVS,KAAKqD,qBAENjE,EAAAC,EAAAC,cAAA,qBA9NN8F,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvG,EAAAC,EAAAC,cAACsG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkB3G,OAAA,wBAAA4G,MAAA,uBAAAC,MAAA","file":"static/js/main.1edcd2b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst header = () => (\r\n        <div className = \"header\">\r\n           <h1>Toronto Waste Lookup</h1>\r\n        </div>\r\n\r\n);\r\n\r\nexport default header;","import React from 'react';\r\nimport classes from './Spinner.module.css';\r\nconst spinner = () =>(\r\n    <div className = {classes.Loader}>Loading...</div>\r\n);\r\nexport default spinner;","import React, { Component } from 'react';\nimport Header from './components/Header';//Header component\nimport Spinner from './components/Spinner';//loading spinner\nimport {Glyphicon} from 'react-bootstrap';\nimport Axios from \"axios\";\nimport Parser from 'html-react-parser';\nimport shortid from 'shortid';\nimport './App.css';\n\n/*store link to API*/\nconst API = 'https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)  \n    /*set initial values for state*/  \n    this.state = {\n      data: [],// stores unparsed json\n      favourites: [],//used to store fovourite items\n      isLoading: true,// used to track state of requests\n      error: null,// holds axios errors\n      value: '',//used for input value binding \n      items: [] //used store extracted objects from json\n    }\n  }\n\n  componentDidMount(){\n    //pulls from API at beginning of app lifecycle\n    Axios.get(API).then(response=>{\n     // eslint-disable-next-line\n     response.data.map((item)=>{\n        //gives every object a favourite and id property\n        item.favourite = false\n        item.id = shortid.generate()\n      })\n      //store data in state and stop loading\n      this.setState({data: response.data,isLoading: false });\n      console.log(this.state.data)\n    }).catch(error=>{\n      this.setState({error: error,isLoading: false});\n      alert(\"There is a problem with the api request of type \"+ error);\n    });\n    \n  }\n\n  //parses json by filtering items using keywords\n  parse = (searchTerm) =>{\n    let parsedData = [];    \n    parsedData = this.state.data\n    // eslint-disable-next-line\n                .filter(object => {\n                    if (object.keywords.indexOf(searchTerm) !== -1) {\n                        return object;\n                    }\n                });\n    console.log(searchTerm);\n    console.log(parsedData);\n    return parsedData;\n  }\n  \n  //handles input form changes\n  handleChange = (event) => {\n    this.setState({value: event.target.value});\n  }\n\n  //handles what happens when favourite button is clicked\n  handleFavourite = (id) =>{\n    let faveLocation = this.state.data.findIndex(item=> item.id === id);\n    let tempData = [];\n    let tempFaves = [];\n    tempData = [...this.state.data];\n    tempFaves = [...this.state.favourites];\n\n    if (this.state.data[faveLocation].favourite){             \n        tempData[faveLocation].favourite = false;\n        let tempIndex = this.state.favourites.findIndex(item=> item.id === id);\n        if (faveLocation !== -1) {\n          tempFaves.splice(tempIndex,1);\n        }\n        \n    }else{\n        //add to favourites pane      \n       tempData[faveLocation].favourite = true;\n       tempFaves.push(tempData[faveLocation]);        \n    }\n    this.setState({data:tempData,favourites:tempFaves});   \n  } \n\n  //handles what happens when input is submitted\n  handleSubmit = (event) => {\n    event.preventDefault()\n    if (this.state.value === \"\") {\n      this.setState({items:[]});      \n    } else {\n        this.setState({items: this.parse(this.state.value) }) ;\n    }\n  }\n\n  //formats items to be displayed properly\n  formatItems = () =>{\n    let items = \"\";\n    if (this.state.items.length === 0) {\n        items = (\n            <div></div>\n        );\n    } else {\n        items = this.state.items\n                .map((item, index) => {  \n                //set class of button to change color based on favourite property\n                 let btnClass = item.favourite ? \"faveButtonGreen\" : \"faveButton\";      \n                 let  parsedHtml = Parser(item.body);\n                 let rawHtml = <div dangerouslySetInnerHTML={{__html:parsedHtml.toString()}}></div>\n                //display item and description \n                return (\n                    <div className=\"item\" key={index}>\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <div className=\"title\">                                                           \n                                 <button \n                                    className={btnClass} \n                                    //pass annonymous function to on click so it is not executed immediately\n                                    onClick = {() =>this.handleFavourite(item.id)}>\n                                    <Glyphicon glyph=\"star\" />\n                                 </button>                                                        \n                                    <h3>{item.title}</h3>\n                                </div>\n                            </div>\n                            <div className=\"col-md-6\">\n                                <div className=\"description\">                         \n                                    {rawHtml}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                );\n            });\n    }\n    return items;\n\n  }\n\n  formatFavourites = () =>{\n    let items = \"\";\n    if (this.state.favourites.length === 0) {\n        items = (\n            <div></div>\n        );\n    } else {\n        items = this.state.favourites\n                .map((item, index) => {  \n                 let btnClass = item.favourite ? \"faveButtonGreen\" : \"faveButton\";      \n                 let  parsedHtml = Parser(item.body);\n                 let rawHtml = <div dangerouslySetInnerHTML={{__html:parsedHtml.toString()}}></div>\n                 \n                 return (\n                    <div className=\"item\" key={index}>\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <div className=\"title\">                                                           \n                                 <button \n                                    className={btnClass} \n                                    onClick = {() =>this.handleFavourite(item.id)}>\n                                    <Glyphicon glyph=\"star\" />\n                                 </button>                                                        \n                                    <h3>{item.title}</h3>\n                                </div>\n                            </div>\n                            <div className=\"col-md-6\">\n                                <div className=\"description\">                         \n                                    {rawHtml}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                );\n            });\n    }\n    return items;\n\n  }\n\n\n  render() {\n    //display loading spinner while calling API\n    if (this.state.isLoading) {\n      return (<Spinner/>)\n    }\n    return (\n      <div className = \"container-default\" >\n        {/*header component*/}\n          <Header />\n        <div className = \"container-fluid\">\n            \n          {/*form for user input*/}\n          <form onSubmit={this.handleSubmit}>          \n                <input type=\"text\"\n                value={this.state.value}\n                style = {{ paddingTop: '5px',paddingBottom: '5px',fontSize: '1.5em', margin: '10px'}}\n                onChange={this.handleChange} />\n              <button type=\"submit\" style = {{backgroundColor: '#239460', marginRight: '10px', marginTop: '20px', borderRadius:'5px', border:'none'}}>\n              <Glyphicon glyph=\"search icon-flipped\" />\n              </button>\n            </form>\n\n            {/* titles and descriptions*/}\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                  {this.formatItems()}\n              </div>  \n            </div>\n\n            {/* favourites pane only displayed when at least favourite is available*/}\n            {this.state.favourites.length > 0 ? <div\n                    className=\"favouritesColor\"\n                    style={{\n                    background: \"#f7fefa\",\n                    paddingBottom:\"15px\"\n                }}>\n                    <div className=\"row\">\n                        <div className=\"title col-md-12\">\n                            <h1\n                                style={{\n                                color: \"#23995c\",\n                                marginLeft: \"25px\",\n                                paddingTop:\"20px\",\n                                fontWeight:\"bold\"\n                                \n                            }}>Favourites</h1>\n                        </div>\n                    </div>\n                    <div className=\"favourites\">\n                    {/* Favourite titles and descriptions */}\n                        {this.formatFavourites()}\n                    </div>\n                </div>: <div></div>}\n            \n           \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1QdL_\",\"load6\":\"Spinner_load6__1HxD1\",\"round\":\"Spinner_round__1703r\"};"],"sourceRoot":""}